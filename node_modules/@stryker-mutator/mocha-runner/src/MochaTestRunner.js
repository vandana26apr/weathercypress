"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const plugin_1 = require("@stryker-mutator/api/plugin");
const test_runner_1 = require("@stryker-mutator/api/test_runner");
const LibWrapper_1 = require("./LibWrapper");
const StrykerMochaReporter_1 = require("./StrykerMochaReporter");
const utils_1 = require("./utils");
const DEFAULT_TEST_PATTERN = 'test/**/*.js';
class MochaTestRunner {
    constructor(log, allFileNames, options) {
        this.log = log;
        this.allFileNames = allFileNames;
        this.mochaOptions = options[utils_1.mochaOptionsKey];
        this.additionalRequires();
        StrykerMochaReporter_1.StrykerMochaReporter.log = log;
    }
    init() {
        if (LibWrapper_1.default.handleFiles) {
            this.log.debug("Mocha >= 6 detected. Using mocha's `handleFiles` to load files");
            this.testFileNames = this.mocha6DiscoverFiles(LibWrapper_1.default.handleFiles);
        }
        else {
            this.log.debug('Mocha < 6 detected. Using custom logic to discover files');
            this.testFileNames = this.legacyDiscoverFiles();
        }
    }
    mocha6DiscoverFiles(handleFiles) {
        const originalProcessExit = process.exit;
        try {
            // process.exit unfortunate side effect: https://github.com/mochajs/mocha/blob/07ea8763c663bdd3fe1f8446cdb62dae233f4916/lib/cli/run-helpers.js#L174
            process.exit = () => { };
            const files = handleFiles(this.mochaOptions);
            return files;
        }
        finally {
            process.exit = originalProcessExit;
        }
    }
    legacyDiscoverFiles() {
        const globPatterns = this.mochaFileGlobPatterns();
        const globPatternsAbsolute = globPatterns.map(glob => path.resolve(glob));
        const fileNames = LibWrapper_1.default.multimatch(this.allFileNames.slice(), globPatternsAbsolute);
        if (fileNames.length) {
            this.log.debug(`Using files: ${JSON.stringify(fileNames, null, 2)}`);
        }
        else {
            this.log.debug(`Tried ${JSON.stringify(globPatternsAbsolute, null, 2)} on files: ${JSON.stringify(this.allFileNames, null, 2)}.`);
            throw new Error(`[${MochaTestRunner.name}] No files discovered (tried pattern(s) ${JSON.stringify(globPatterns, null, 2)}). Please specify the files (glob patterns) containing your tests in ${utils_1.mochaOptionsKey}.files in your stryker.conf.js file.`);
        }
        return fileNames;
    }
    mochaFileGlobPatterns() {
        // Use both `spec` as `files`
        const globPatterns = [];
        if (this.mochaOptions.spec) {
            globPatterns.push(...this.mochaOptions.spec);
        }
        if (typeof this.mochaOptions.files === 'string') {
            // `files` if for backward compat
            globPatterns.push(this.mochaOptions.files);
        }
        else if (this.mochaOptions.files) {
            globPatterns.push(...this.mochaOptions.files);
        }
        if (!globPatterns.length) {
            globPatterns.push(DEFAULT_TEST_PATTERN);
        }
        return globPatterns;
    }
    run({ testHooks }) {
        return new Promise((resolve, reject) => {
            try {
                this.purgeFiles();
                const mocha = new LibWrapper_1.default.Mocha({ reporter: StrykerMochaReporter_1.StrykerMochaReporter, bail: true });
                this.configure(mocha);
                this.addTestHooks(mocha, testHooks);
                this.addFiles(mocha);
                try {
                    mocha.run(() => {
                        const reporter = StrykerMochaReporter_1.StrykerMochaReporter.currentInstance;
                        if (reporter) {
                            const result = reporter.runResult;
                            resolve(result);
                        }
                        else {
                            const errorMsg = 'The StrykerMochaReporter was not instantiated properly. Could not retrieve the RunResult.';
                            this.log.error(errorMsg);
                            resolve({
                                errorMessages: [errorMsg],
                                status: test_runner_1.RunStatus.Error,
                                tests: []
                            });
                        }
                    });
                }
                catch (error) {
                    resolve({
                        errorMessages: [error],
                        status: test_runner_1.RunStatus.Error,
                        tests: []
                    });
                }
            }
            catch (error) {
                this.log.error(error);
                reject(error);
            }
        });
    }
    purgeFiles() {
        this.allFileNames.forEach(fileName => delete require.cache[fileName]);
    }
    addFiles(mocha) {
        this.testFileNames.forEach(fileName => {
            mocha.addFile(fileName);
        });
    }
    addTestHooks(mocha, testHooks) {
        if (testHooks) {
            const suite = mocha.suite;
            suite.emit('pre-require', global, '', mocha);
            suite.emit('require', utils_1.evalGlobal(testHooks), '', mocha);
            suite.emit('post-require', global, '', mocha);
        }
    }
    configure(mocha) {
        const options = this.mochaOptions;
        function setIfDefined(value, operation) {
            if (typeof value !== 'undefined') {
                operation.apply(mocha, [value]);
            }
        }
        if (options) {
            setIfDefined(options.asyncOnly, mocha.asyncOnly);
            setIfDefined(options.timeout, mocha.timeout);
            setIfDefined(options.ui, mocha.ui);
            setIfDefined(options.grep, mocha.grep);
        }
    }
    additionalRequires() {
        if (this.mochaOptions.require) {
            const modulesToRequire = this.mochaOptions.require.map(moduleName => (moduleName.startsWith('.') ? path.resolve(moduleName) : moduleName));
            modulesToRequire.forEach(LibWrapper_1.default.require);
        }
    }
}
exports.default = MochaTestRunner;
MochaTestRunner.inject = plugin_1.tokens(plugin_1.commonTokens.logger, plugin_1.commonTokens.sandboxFileNames, plugin_1.commonTokens.options);
//# sourceMappingURL=MochaTestRunner.js.map