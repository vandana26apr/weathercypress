"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Executes a piece of javascript code in global scope while passing the `require` function
 * @param body The JavaScript to execute
 */
function evalGlobal(body) {
    const fn = new Function('require', body);
    fn(require);
}
exports.evalGlobal = evalGlobal;
function serializeArguments(mochaOptions) {
    const args = [];
    Object.keys(mochaOptions).forEach(key => {
        args.push(`--${key}`);
        const value = mochaOptions[key];
        if (typeof value === 'string') {
            args.push(value);
        }
        else if (Array.isArray(value)) {
            args.push(value.join(','));
        }
    });
    return args;
}
exports.serializeArguments = serializeArguments;
exports.mochaOptionsKey = 'mochaOptions';
const SUPPORTED_MOCHA_OPTIONS = Object.freeze(['extension', 'require', 'timeout', 'async-only', 'ui', 'grep', 'exclude', 'ignore', 'spec', 'file']);
/**
 * Filter out those config values that are actually useful to run mocha with Stryker
 * @param rawConfig The raw parsed mocha configuration
 */
function filterConfig(rawConfig) {
    const options = {};
    Object.keys(rawConfig)
        .filter(rawOption => SUPPORTED_MOCHA_OPTIONS.some(supportedOption => rawOption === supportedOption))
        .forEach(option => (options[option] = rawConfig[option]));
    // Config file can also contain positional arguments. They are provided under the `_` key
    // For example:
    // When mocha.opts contains "--async-only test/**/*.js", then "test/**/*.js will be the positional argument
    // We must provide it to mocha as "spec"
    if (rawConfig._ && rawConfig._.length) {
        if (!options.spec) {
            options.spec = [];
        }
        const specs = options.spec;
        rawConfig._.forEach((positionalArgument) => specs.push(positionalArgument));
    }
    return options;
}
exports.filterConfig = filterConfig;
//# sourceMappingURL=utils.js.map