import { LogLevel, MutationScoreThresholds, MutatorDescriptor, StrykerOptions, DashboardOptions } from '../../core';
/**
 * When configuring stryker, every option is optional
 * Including deep properties like `dashboard.project`.
 * That's why we use a `DeepPartial` mapped type here.
 */
declare type DeepPartial<T> = {
    [P in keyof T]?: T[P] extends object ? DeepPartial<T[P]> : T[P];
};
export default class Config implements StrykerOptions {
    [customConfig: string]: any;
    files: string[];
    mutate: string[];
    logLevel: LogLevel;
    fileLogLevel: LogLevel;
    timeoutMS: number;
    timeoutFactor: number;
    plugins: string[];
    reporters: string[];
    coverageAnalysis: 'perTest' | 'all' | 'off';
    testRunner: string;
    testFramework: string;
    mutator: string | MutatorDescriptor;
    transpilers: string[];
    maxConcurrentTestRunners: number;
    symlinkNodeModules: boolean;
    thresholds: MutationScoreThresholds;
    allowConsoleColors: boolean;
    /**
     * The options for the 'dashboard' reporter
     */
    dashboard: DashboardOptions;
    tempDirName: string;
    set(newConfig: DeepPartial<StrykerOptions>): void;
}
export {};
//# sourceMappingURL=Config.d.ts.map