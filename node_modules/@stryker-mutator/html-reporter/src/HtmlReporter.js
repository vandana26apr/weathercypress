"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const plugin_1 = require("@stryker-mutator/api/plugin");
const fileUrl = require("file-url");
const bindMutationTestReport_1 = require("./templates/bindMutationTestReport");
const util = require("./util");
const DEFAULT_BASE_FOLDER = path.normalize('reports/mutation/html');
exports.RESOURCES_DIR_NAME = 'strykerResources';
class HtmlReporter {
    constructor(options, log) {
        this.options = options;
        this.log = log;
    }
    onMutationTestReportReady(report) {
        this.mainPromise = this.generateReport(report);
    }
    wrapUp() {
        return this.mainPromise;
    }
    async generateReport(report) {
        const indexFileName = path.resolve(this.baseDir, 'index.html');
        await this.cleanBaseFolder();
        await Promise.all([
            util.copyFile(require.resolve('mutation-testing-elements/dist/mutation-test-elements.js'), path.resolve(this.baseDir, 'mutation-test-elements.js')),
            util.copyFile(path.resolve(__dirname, 'templates', 'stryker-80x80.png'), path.resolve(this.baseDir, 'stryker-80x80.png')),
            util.copyFile(path.resolve(__dirname, 'templates', 'index.html'), path.resolve(this.baseDir, 'index.html')),
            util.writeFile(path.resolve(this.baseDir, 'bind-mutation-test-report.js'), bindMutationTestReport_1.bindMutationTestReport(report))
        ]);
        this.log.info(`Your report can be found at: ${fileUrl(indexFileName)}`);
    }
    get baseDir() {
        if (!this._baseDir) {
            if (this.options.htmlReporter && this.options.htmlReporter.baseDir) {
                this._baseDir = this.options.htmlReporter.baseDir;
                this.log.debug(`Using configured output folder ${this._baseDir}`);
            }
            else {
                this.log.debug(`No base folder configuration found (using configuration: htmlReporter: { baseDir: 'output/folder' }), using default ${DEFAULT_BASE_FOLDER}`);
                this._baseDir = DEFAULT_BASE_FOLDER;
            }
        }
        return this._baseDir;
    }
    async cleanBaseFolder() {
        await util.deleteDir(this.baseDir);
        await util.mkdir(this.baseDir);
    }
}
exports.default = HtmlReporter;
HtmlReporter.inject = plugin_1.tokens(plugin_1.commonTokens.options, plugin_1.commonTokens.logger);
//# sourceMappingURL=HtmlReporter.js.map