"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const plugin_1 = require("@stryker-mutator/api/plugin");
const test_runner_1 = require("@stryker-mutator/api/test_runner");
const jestTestAdapters_1 = require("./jestTestAdapters");
function jestTestRunnerFactory(injector) {
    return injector
        .provideValue(exports.PROCESS_ENV_TOKEN, process.env)
        .provideValue(jestTestAdapters_1.JEST_VERSION_TOKEN, require('jest/package.json').version)
        .provideFactory(exports.JEST_TEST_ADAPTER_TOKEN, jestTestAdapters_1.jestTestAdapterFactory)
        .injectClass(JestTestRunner);
}
exports.jestTestRunnerFactory = jestTestRunnerFactory;
jestTestRunnerFactory.inject = plugin_1.tokens(plugin_1.commonTokens.injector);
exports.PROCESS_ENV_TOKEN = 'PROCESS_ENV_TOKEN';
exports.JEST_TEST_ADAPTER_TOKEN = 'jestTestAdapter';
class JestTestRunner {
    constructor(log, options, processEnvRef, jestTestAdapter) {
        this.log = log;
        this.processEnvRef = processEnvRef;
        this.jestTestAdapter = jestTestAdapter;
        // Get jest configuration from stryker options and assign it to jestConfig
        this.jestConfig = options.jest.config;
        // Get enableFindRelatedTests from stryker jest options or default to true
        this.enableFindRelatedTests = options.jest.enableFindRelatedTests;
        if (this.enableFindRelatedTests === undefined) {
            this.enableFindRelatedTests = true;
        }
        if (this.enableFindRelatedTests) {
            this.log.debug('Running jest with --findRelatedTests flag. Set jest.enableFindRelatedTests to false to run all tests on every mutant.');
        }
        else {
            this.log.debug('Running jest without --findRelatedTests flag. Set jest.enableFindRelatedTests to true to run only relevant tests on every mutant.');
        }
        // basePath will be used in future releases of Stryker as a way to define the project root
        // Default to process.cwd when basePath is not set for now, should be removed when issue is solved
        // https://github.com/stryker-mutator/stryker/issues/650
        this.jestConfig.rootDir = options.basePath || process.cwd();
        this.log.debug(`Project root is ${this.jestConfig.rootDir}`);
    }
    async run(options) {
        this.setNodeEnv();
        const { results } = await this.jestTestAdapter.run(this.jestConfig, process.cwd(), this.enableFindRelatedTests ? options.mutatedFileName : undefined);
        // Get the non-empty errorMessages from the jest RunResult, it's safe to cast to Array<string> here because we filter the empty error messages
        const errorMessages = results.testResults
            .map((testSuite) => testSuite.failureMessage)
            .filter(errorMessage => errorMessage);
        return {
            errorMessages,
            status: results.numRuntimeErrorTestSuites > 0 ? test_runner_1.RunStatus.Error : test_runner_1.RunStatus.Complete,
            tests: this.processTestResults(results.testResults)
        };
    }
    setNodeEnv() {
        // Jest CLI will set process.env.NODE_ENV to 'test' when it's null, do the same here
        // https://github.com/facebook/jest/blob/master/packages/jest-cli/bin/jest.js#L12-L14
        if (!this.processEnvRef.NODE_ENV) {
            this.processEnvRef.NODE_ENV = 'test';
        }
    }
    processTestResults(suiteResults) {
        const testResults = [];
        for (const suiteResult of suiteResults) {
            for (const testResult of suiteResult.testResults) {
                testResults.push({
                    failureMessages: testResult.failureMessages,
                    name: testResult.fullName,
                    status: this.determineTestResultStatus(testResult.status),
                    timeSpentMs: testResult.duration ? testResult.duration : 0
                });
            }
        }
        return testResults;
    }
    determineTestResultStatus(status) {
        switch (status) {
            case 'passed':
                return test_runner_1.TestStatus.Success;
            case 'pending':
                return test_runner_1.TestStatus.Skipped;
            case 'todo':
                return test_runner_1.TestStatus.Skipped;
            default:
                return test_runner_1.TestStatus.Failed;
        }
    }
}
exports.default = JestTestRunner;
JestTestRunner.inject = plugin_1.tokens(plugin_1.commonTokens.logger, plugin_1.commonTokens.options, exports.PROCESS_ENV_TOKEN, exports.JEST_TEST_ADAPTER_TOKEN);
//# sourceMappingURL=JestTestRunner.js.map