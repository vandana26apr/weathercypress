export { serialize, deserialize } from 'surrial';
export declare function freezeRecursively<T extends {
    [prop: string]: any;
}>(target: T): T;
export declare function filterEmpty<T>(input: Array<T | null | void>): T[];
export declare function wrapInClosure(codeFragment: string): string;
/**
 * A wrapper around `process.env` (for testability)
 */
export declare function getEnvironmentVariable(nameEnvironmentVariable: string): string | undefined;
export declare function getEnvironmentVariableOrThrow(name: string): string;
/**
 * A wrapper around `process.exitCode = n` (for testability)
 */
export declare function setExitCode(n: number): void;
export declare function base64Decode(base64EncodedString: string): string;
export declare function kill(pid: number): Promise<void>;
export declare const TimeoutExpired: unique symbol;
export declare function timeout<T>(promise: Promise<T>, ms: number): Promise<T | typeof TimeoutExpired>;
export declare function padLeft(input: string): string;
//# sourceMappingURL=objectUtils.d.ts.map