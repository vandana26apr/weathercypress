"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const util_1 = require("@stryker-mutator/util");
const nodeGlob = require("glob");
const mkdirp = require("mkdirp");
const rimraf = require("rimraf");
function glob(expression) {
    return new Promise((resolve, reject) => {
        nodeGlob(expression, { nodir: true }, (error, matches) => {
            error ? reject(error) : resolve(matches);
        });
    });
}
exports.glob = glob;
function deleteDir(dirToDelete) {
    return new Promise((resolve, reject) => {
        rimraf(dirToDelete, error => {
            error ? reject(error) : resolve();
        });
    });
}
exports.deleteDir = deleteDir;
async function cleanFolder(folderName) {
    try {
        await util_1.fsAsPromised.lstat(folderName);
        await deleteDir(folderName);
        return mkdirp.sync(folderName);
    }
    catch (e) {
        return mkdirp.sync(folderName);
    }
}
exports.cleanFolder = cleanFolder;
/**
 * Wrapper around the 'require' function (for testability)
 */
function importModule(moduleName) {
    return require(moduleName);
}
exports.importModule = importModule;
/**
 * Writes data to a specified file.
 * @param fileName The path to the file.
 * @param data The content of the file.
 * @returns A promise to eventually save the file.
 */
function writeFile(fileName, data) {
    if (Buffer.isBuffer(data)) {
        return util_1.fsAsPromised.writeFile(fileName, data);
    }
    else {
        return util_1.fsAsPromised.writeFile(fileName, data, 'utf8');
    }
}
exports.writeFile = writeFile;
/**
 * Creates a symlink at `from` that points to `to`
 * @param to The thing you want to point to
 * @param from The thing you want to point from
 */
function symlinkJunction(to, from) {
    return util_1.fsAsPromised.symlink(to, from, 'junction');
}
exports.symlinkJunction = symlinkJunction;
/**
 * Looks for the node_modules folder from basePath up to root.
 * returns the first occurrence of the node_modules, or null of none could be found.
 * @param basePath starting point
 */
async function findNodeModules(basePath) {
    basePath = path.resolve(basePath);
    const nodeModules = path.resolve(basePath, 'node_modules');
    if (await util_1.fsAsPromised.exists(nodeModules)) {
        return nodeModules;
    }
    else {
        const parent = path.dirname(basePath);
        if (parent === basePath) {
            return null;
        }
        else {
            return findNodeModules(path.dirname(basePath));
        }
    }
}
exports.findNodeModules = findNodeModules;
//# sourceMappingURL=fileUtils.js.map