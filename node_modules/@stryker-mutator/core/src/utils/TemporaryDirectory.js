"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const plugin_1 = require("@stryker-mutator/api/plugin");
const util_1 = require("@stryker-mutator/util");
const mkdirp = require("mkdirp");
const fileUtils_1 = require("./fileUtils");
class TemporaryDirectory {
    constructor(log, options) {
        this.log = log;
        this.isInitialized = false;
        this.temporaryDirectory = path.resolve(options.tempDirName);
    }
    initialize() {
        this.isInitialized = true;
        this.log.debug('Using temp directory "%s"', this.temporaryDirectory);
        mkdirp.sync(this.temporaryDirectory);
    }
    /**
     * Creates a new random directory with the specified prefix.
     * @param prefix The prefix.
     * @returns The path to the directory.
     */
    createRandomDirectory(prefix) {
        if (!this.isInitialized) {
            throw new Error('initialize() was not called!');
        }
        const dir = path.resolve(this.temporaryDirectory, `${prefix}${this.random()}`);
        mkdirp.sync(dir);
        return dir;
    }
    /**
     * Copies a file.
     * @param fromFilename The path to the existing file.
     * @param toFilename The path to copy the file to.
     * @param instrumenter An optional additional instrumenter to stream the file through
     * @returns A promise to eventually copy the file.
     */
    copyFile(fromFilename, toFilename, instrumenter) {
        return new Promise((resolve, reject) => {
            let readStream = util_1.fsAsPromised.createReadStream(fromFilename, { encoding: 'utf8' });
            const writeStream = util_1.fsAsPromised.createWriteStream(toFilename);
            readStream.on('error', reject);
            writeStream.on('error', reject);
            if (instrumenter) {
                readStream = readStream.pipe(instrumenter);
            }
            readStream.pipe(writeStream);
            readStream.on('end', () => resolve());
        });
    }
    /**
     * Deletes the Stryker-temp directory
     */
    async dispose() {
        if (!this.isInitialized) {
            throw new Error('initialize() was not called!');
        }
        this.log.debug('Deleting stryker temp directory %s', this.temporaryDirectory);
        try {
            await fileUtils_1.deleteDir(this.temporaryDirectory);
        }
        catch (e) {
            return this.log.info(`Failed to delete stryker temp directory ${this.temporaryDirectory}`);
        }
    }
    /**
     * Creates a random integer number.
     * @returns A random integer.
     */
    random() {
        return Math.ceil(Math.random() * 10000000);
    }
}
exports.TemporaryDirectory = TemporaryDirectory;
TemporaryDirectory.inject = plugin_1.tokens(plugin_1.commonTokens.logger, plugin_1.commonTokens.options);
//# sourceMappingURL=TemporaryDirectory.js.map