"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const child_process_1 = require("child_process");
const os = require("os");
const test_runner_1 = require("@stryker-mutator/api/test_runner");
const util_1 = require("@stryker-mutator/util");
const objectUtils_1 = require("../utils/objectUtils");
const Timer_1 = require("../utils/Timer");
/**
 * A test runner that uses a (bash or cmd) command to execute the tests.
 * Does not know hom many tests are executed or any code coverage results,
 * instead, it mimics a simple test result based on the exit code.
 * The command can be configured, but defaults to `npm test`.
 */
class CommandTestRunner {
    constructor(workingDir, options) {
        this.workingDir = workingDir;
        this.settings = Object.assign({
            command: 'npm test'
        }, options.commandRunner);
    }
    /**
     * Determines whether a given name is "command" (ignore case)
     * @param name Maybe "command", maybe not
     */
    static is(name) {
        return this.runnerName === name.toLowerCase();
    }
    run() {
        return new Promise((res, rej) => {
            const timer = new Timer_1.default();
            const output = [];
            const childProcess = child_process_1.exec(this.settings.command, { cwd: this.workingDir });
            childProcess.on('error', error => {
                objectUtils_1.kill(childProcess.pid)
                    .then(() => handleResolve(errorResult(error)))
                    .catch(rej);
            });
            childProcess.on('exit', code => {
                const result = completeResult(code, timer);
                handleResolve(result);
            });
            childProcess.stdout.on('data', chunk => {
                output.push(chunk);
            });
            childProcess.stderr.on('data', chunk => {
                output.push(chunk);
            });
            this.timeoutHandler = async () => {
                handleResolve({ status: test_runner_1.RunStatus.Timeout, tests: [] });
                await objectUtils_1.kill(childProcess.pid);
            };
            const handleResolve = (runResult) => {
                removeAllListeners();
                this.timeoutHandler = undefined;
                res(runResult);
            };
            function removeAllListeners() {
                childProcess.stderr.removeAllListeners();
                childProcess.stdout.removeAllListeners();
                childProcess.removeAllListeners();
            }
            function errorResult(error) {
                return {
                    errorMessages: [util_1.errorToString(error)],
                    status: test_runner_1.RunStatus.Error,
                    tests: []
                };
            }
            function completeResult(exitCode, timer) {
                const duration = timer.elapsedMs();
                if (exitCode === 0) {
                    return {
                        status: test_runner_1.RunStatus.Complete,
                        tests: [
                            {
                                name: 'All tests',
                                status: test_runner_1.TestStatus.Success,
                                timeSpentMs: duration
                            }
                        ]
                    };
                }
                else {
                    return {
                        status: test_runner_1.RunStatus.Complete,
                        tests: [
                            {
                                failureMessages: [output.map(buf => buf.toString()).join(os.EOL)],
                                name: 'All tests',
                                status: test_runner_1.TestStatus.Failed,
                                timeSpentMs: duration
                            }
                        ]
                    };
                }
            }
        });
    }
    async dispose() {
        if (this.timeoutHandler) {
            await this.timeoutHandler();
        }
    }
}
exports.default = CommandTestRunner;
/**
 * "command"
 */
CommandTestRunner.runnerName = CommandTestRunner.name.replace('TestRunner', '').toLowerCase();
//# sourceMappingURL=CommandTestRunner.js.map