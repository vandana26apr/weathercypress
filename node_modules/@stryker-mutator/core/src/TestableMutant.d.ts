import { Location } from '@stryker-mutator/api/core';
import { Mutant } from '@stryker-mutator/api/mutant';
import { MutantResult, MutantStatus } from '@stryker-mutator/api/report';
import { TestSelection } from '@stryker-mutator/api/test_framework';
import { RunResult, TestResult } from '@stryker-mutator/api/test_runner';
import SourceFile from './SourceFile';
export declare enum TestSelectionResult {
    Failed = 0,
    FailedButAlreadyReported = 1,
    Success = 2
}
export default class TestableMutant {
    readonly id: string;
    mutant: Mutant;
    sourceFile: SourceFile;
    specsRan: string[];
    private readonly filter;
    private _location;
    testSelectionResult: TestSelectionResult;
    get selectedTests(): TestSelection[];
    get runAllTests(): boolean;
    get timeSpentScopedTests(): number;
    get fileName(): string;
    get mutatorName(): string;
    get range(): import("@stryker-mutator/api/src/core/Range").default;
    get replacement(): string;
    get location(): Location;
    get mutatedCode(): string;
    get originalCode(): string;
    selectAllTests(runResult: RunResult, testSelectionResult: TestSelectionResult): void;
    selectTest(testResult: TestResult, index: number): void;
    constructor(id: string, mutant: Mutant, sourceFile: SourceFile);
    get originalLines(): string;
    get mutatedLines(): string;
    private getMutationLineIndexes;
    createResult(status: MutantStatus, testsRan: string[]): MutantResult;
    toString(): string;
}
//# sourceMappingURL=TestableMutant.d.ts.map