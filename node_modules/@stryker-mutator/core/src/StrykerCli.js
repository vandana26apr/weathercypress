"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const commander_1 = require("commander");
const log4js_1 = require("log4js");
const core_1 = require("@stryker-mutator/api/core");
const config_1 = require("@stryker-mutator/api/config");
const ConfigReader_1 = require("./config/ConfigReader");
const initializer_1 = require("./initializer");
const LogConfigurator_1 = require("./logging/LogConfigurator");
const Stryker_1 = require("./Stryker");
/**
 * Interpret a command line argument and add it to an object.
 * @param object The object to assign the value to.
 * @param key The property name under which the value needs to be stored.
 */
function deepOption(object, key) {
    return (value) => {
        object[key] = value;
        return undefined;
    };
}
function list(val) {
    return val.split(',');
}
function parseBoolean(val) {
    const v = val.toLocaleLowerCase();
    return v !== 'false' && v !== '0';
}
class StrykerCli {
    constructor(argv, program = new commander_1.Command(), runMutationTest = (options) => new Stryker_1.default(options).runMutationTest(), log = log4js_1.getLogger(StrykerCli.name)) {
        this.argv = argv;
        this.program = program;
        this.runMutationTest = runMutationTest;
        this.log = log;
        this.command = '';
        this.strykerConfig = null;
    }
    run() {
        const dashboard = {};
        const defaultValues = new config_1.Config();
        this.program
            .version(require('../package.json').version)
            .usage('<command> [options] [stryker.conf.js]')
            .description(`Possible commands:
        run: Run mutation testing
        init: Initialize Stryker for your project

    Optional location to the stryker.conf.js file as last argument. That file should export a function which accepts a "config" object\n${ConfigReader_1.CONFIG_SYNTAX_HELP}`)
            .arguments('<command> [stryker.conf.js]')
            .action((cmd, config) => {
            this.command = cmd;
            this.strykerConfig = config;
        })
            .option('-f, --files <allFiles>', `A comma separated list of globbing expression used for selecting all files needed to run the tests. For a more detailed way of selecting input files, please use a configFile.
      Example: node_modules/a-lib/**/*.js,src/**/*.js,!src/index.js,a.js,test/**/*.js`, list)
            .option('-m, --mutate <filesToMutate>', `A comma separated list of globbing expression used for selecting the files that should be mutated.
      Example: src/**/*.js,a.js`, list)
            .option('--coverageAnalysis <perTest|all|off>', `The coverage analysis strategy you want to use. Default value: "${defaultValues.coverageAnalysis}"`)
            .option('--testFramework <name>', 'The name of the test framework you want to use.')
            .option('--testRunner <name>', 'The name of the test runner you want to use')
            .option('--mutator <name>', 'The name of the mutant generator you want to use')
            .option('--transpilers <listOfTranspilers>', 'A comma separated list of transpilers to use.', list)
            .option('--reporters <name>', 'A comma separated list of the names of the reporter(s) you want to use', list)
            .option('--plugins <listOfPlugins>', 'A list of plugins you want stryker to load (`require`).', list)
            .option('--timeoutMS <number>', 'Tweak the absolute timeout used to wait for a test runner to complete', parseInt)
            .option('--timeoutFactor <number>', 'Tweak the standard deviation relative to the normal test run of a mutated test', parseFloat)
            .option('--maxConcurrentTestRunners <n>', 'Set the number of max concurrent test runner to spawn (default: cpuCount)', parseInt)
            .option('--logLevel <level>', `Set the log level for the console. Possible values: fatal, error, warn, info, debug, trace, all and off. Default is "${defaultValues.logLevel}"`)
            .option('--fileLogLevel <level>', `Set the log4js log level for the "stryker.log" file. Possible values: fatal, error, warn, info, debug, trace, all and off. Default is "${defaultValues.fileLogLevel}"`)
            .option('--allowConsoleColors <true/false>', 'Indicates whether or not Stryker should use colors in console.', parseBoolean, true)
            .option('--dashboard.project <name>', 'Indicates which project name to use if the "dashboard" reporter is enabled. Defaults to the git url configured in the environment of your CI server.', deepOption(dashboard, 'project'))
            .option('--dashboard.version <version>', 'Indicates which version to use if the "dashboard" reporter is enabled. Defaults to the branch name or tag name configured in the environment of your CI server.', deepOption(dashboard, 'version'))
            .option('--dashboard.module <name>', 'Indicates which module name to use if the "dashboard" reporter is enabled.', deepOption(dashboard, 'module'))
            .option('--dashboard.baseUrl <url>', `Indicates which baseUrl to use when reporting to the stryker dashboard. Default: "${defaultValues.dashboard.baseUrl}"`, deepOption(dashboard, 'baseUrl'))
            .option(`--dashboard.reportType <${core_1.ALL_REPORT_TYPES.join('|')}>`, `Send a full report (inc. source code and mutant results) or only the mutation score. Default: ${defaultValues.dashboard.reportType}`, deepOption(dashboard, 'reportType'))
            .option('--tempDirName <name>', 'Set the name of the directory that is used by Stryker as a working directory. This directory will be cleaned after a successful run')
            .parse(this.argv);
        // Earliest opportunity to configure the log level based on the logLevel argument
        LogConfigurator_1.default.configureMainProcess(this.program.logLevel);
        // Cleanup commander state
        delete this.program.options;
        delete this.program.rawArgs;
        delete this.program.args;
        delete this.program.Command;
        delete this.program.Option;
        delete this.program.commands;
        for (const i in this.program) {
            if (i.startsWith('_') || i.startsWith('dashboard.')) {
                delete this.program[i];
            }
        }
        if (this.strykerConfig) {
            this.program.configFile = this.strykerConfig;
        }
        this.program.dashboard = dashboard;
        const commands = {
            init: () => initializer_1.initializerFactory().initialize(),
            run: () => this.runMutationTest(this.program)
        };
        if (Object.keys(commands).includes(this.command)) {
            commands[this.command]().catch(err => {
                this.log.error('an error occurred', err);
                if (!this.log.isTraceEnabled()) {
                    this.log.info('Trouble figuring out what went wrong? Try `npx stryker run --fileLogLevel trace --logLevel debug` to get some more info.');
                }
                process.exitCode = 1;
                process.kill(process.pid, 'SIGINT');
            });
        }
        else {
            this.log.error('Unknown command: "%s", supported commands: [%s], or use `stryker --help`.', this.command, Object.keys(commands));
        }
    }
}
exports.default = StrykerCli;
//# sourceMappingURL=StrykerCli.js.map