"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const SourceFile_1 = require("./SourceFile");
const objectUtils_1 = require("./utils/objectUtils");
var TestSelectionResult;
(function (TestSelectionResult) {
    TestSelectionResult[TestSelectionResult["Failed"] = 0] = "Failed";
    TestSelectionResult[TestSelectionResult["FailedButAlreadyReported"] = 1] = "FailedButAlreadyReported";
    TestSelectionResult[TestSelectionResult["Success"] = 2] = "Success";
})(TestSelectionResult = exports.TestSelectionResult || (exports.TestSelectionResult = {}));
class TestFilter {
    constructor() {
        this.timeSpentScopedTests = 0;
        this.runAllTests = false;
        this.selectedTests = [];
    }
    selectAllTests(runResult) {
        this.timeSpentScopedTests = runResult.tests.reduce((time, test) => time + test.timeSpentMs, this.timeSpentScopedTests);
        this.runAllTests = true;
    }
    selectTest(testResult, index) {
        this.selectedTests.push({ id: index, name: testResult.name });
        this.timeSpentScopedTests += testResult.timeSpentMs;
        this.runAllTests = false;
    }
}
class TestableMutant {
    constructor(id, mutant, sourceFile) {
        this.id = id;
        this.mutant = mutant;
        this.sourceFile = sourceFile;
        this.specsRan = [];
        this.filter = new TestFilter();
        this.testSelectionResult = TestSelectionResult.Success;
    }
    get selectedTests() {
        return this.filter.selectedTests;
    }
    get runAllTests() {
        return this.filter.runAllTests;
    }
    get timeSpentScopedTests() {
        return this.filter.timeSpentScopedTests;
    }
    get fileName() {
        return this.mutant.fileName;
    }
    get mutatorName() {
        return this.mutant.mutatorName;
    }
    get range() {
        return this.mutant.range;
    }
    get replacement() {
        return this.mutant.replacement;
    }
    get location() {
        if (!this._location) {
            this._location = this.sourceFile.getLocation(this.range);
        }
        return this._location;
    }
    get mutatedCode() {
        return this.sourceFile.content.substr(0, this.range[0]) + this.replacement + this.sourceFile.content.substr(this.range[1]);
    }
    get originalCode() {
        return this.sourceFile.content;
    }
    selectAllTests(runResult, testSelectionResult) {
        this.filter.selectAllTests(runResult);
        this.testSelectionResult = testSelectionResult;
    }
    selectTest(testResult, index) {
        this.filter.selectTest(testResult, index);
    }
    get originalLines() {
        const [startIndex, endIndex] = this.getMutationLineIndexes();
        return this.sourceFile.content.substring(startIndex, endIndex);
    }
    get mutatedLines() {
        const [startIndex, endIndex] = this.getMutationLineIndexes();
        return (this.sourceFile.content.substring(startIndex, this.mutant.range[0]) +
            this.mutant.replacement +
            this.sourceFile.content.substring(this.mutant.range[1], endIndex));
    }
    getMutationLineIndexes() {
        let startIndexLines = this.mutant.range[0];
        let endIndexLines = this.mutant.range[1];
        while (startIndexLines > 0 && !SourceFile_1.isLineBreak(this.originalCode.charCodeAt(startIndexLines - 1))) {
            startIndexLines--;
        }
        while (endIndexLines < this.sourceFile.content.length && !SourceFile_1.isLineBreak(this.originalCode.charCodeAt(endIndexLines))) {
            endIndexLines++;
        }
        return [startIndexLines, endIndexLines];
    }
    createResult(status, testsRan) {
        return objectUtils_1.freezeRecursively({
            id: this.id,
            location: this.location,
            mutatedLines: this.mutatedLines,
            mutatorName: this.mutatorName,
            originalLines: this.originalLines,
            range: this.range,
            replacement: this.replacement,
            sourceFilePath: this.fileName,
            status,
            testsRan
        });
    }
    toString() {
        return `${this.mutant.mutatorName}: (${this.replacement}) file://${this.fileName}:${this.location.start.line + 1}:${this.location.start.column}`;
    }
}
exports.default = TestableMutant;
//# sourceMappingURL=TestableMutant.js.map