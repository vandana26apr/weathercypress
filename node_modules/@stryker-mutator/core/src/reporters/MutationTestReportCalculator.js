"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const plugin_1 = require("@stryker-mutator/api/plugin");
const report_1 = require("@stryker-mutator/api/report");
const util_1 = require("@stryker-mutator/util");
const di_1 = require("../di");
class MutationTestReportCalculator {
    constructor(reporter, options, inputFiles, log) {
        this.reporter = reporter;
        this.options = options;
        this.inputFiles = inputFiles;
        this.log = log;
    }
    report(results) {
        this.reporter.onMutationTestReportReady(this.mutationTestReport(results));
    }
    mutationTestReport(results) {
        return {
            files: this.toFileResults(results),
            schemaVersion: '1.0',
            thresholds: this.options.thresholds
        };
    }
    toFileResults(results) {
        const resultDictionary = Object.create(null);
        results.forEach(mutantResult => {
            const fileResult = resultDictionary[mutantResult.sourceFilePath];
            if (fileResult) {
                fileResult.mutants.push(this.toMutantResult(mutantResult));
            }
            else {
                const sourceFile = this.inputFiles.files.find(file => file.name === mutantResult.sourceFilePath);
                if (sourceFile) {
                    resultDictionary[mutantResult.sourceFilePath] = {
                        language: this.determineLanguage(sourceFile.name),
                        mutants: [this.toMutantResult(mutantResult)],
                        source: sourceFile.textContent
                    };
                }
                else {
                    this.log.warn(util_1.normalizeWhitespaces(`File "${mutantResult.sourceFilePath}" not found
          in input files, but did receive mutant result for it. This shouldn't happen`));
                }
            }
        });
        return resultDictionary;
    }
    determineLanguage(name) {
        const ext = path.extname(name).toLowerCase();
        switch (ext) {
            case '.ts':
            case '.tsx':
                return 'typescript';
            case '.html':
            case '.vue':
                return 'html';
            default:
                return 'javascript';
        }
    }
    toMutantResult(mutantResult) {
        return {
            id: mutantResult.id,
            location: this.toLocation(mutantResult.location),
            mutatorName: mutantResult.mutatorName,
            replacement: mutantResult.replacement,
            status: this.toStatus(mutantResult.status)
        };
    }
    toLocation(location) {
        return {
            end: this.toPosition(location.end),
            start: this.toPosition(location.start)
        };
    }
    toPosition(pos) {
        return {
            column: pos.column + 1,
            line: pos.line + 1
        };
    }
    toStatus(status) {
        switch (status) {
            case report_1.MutantStatus.Killed:
                return "Killed" /* Killed */;
            case report_1.MutantStatus.NoCoverage:
                return "NoCoverage" /* NoCoverage */;
            case report_1.MutantStatus.RuntimeError:
                return "RuntimeError" /* RuntimeError */;
            case report_1.MutantStatus.Survived:
                return "Survived" /* Survived */;
            case report_1.MutantStatus.TimedOut:
                return "Timeout" /* Timeout */;
            case report_1.MutantStatus.TranspileError:
                return "CompileError" /* CompileError */;
            default:
                this.logUnsupportedMutantStatus(status);
                return "RuntimeError" /* RuntimeError */;
        }
    }
    logUnsupportedMutantStatus(status) {
        this.log.warn('Unable to convert "%s" to a MutantStatus', status);
    }
}
exports.MutationTestReportCalculator = MutationTestReportCalculator;
MutationTestReportCalculator.inject = plugin_1.tokens(di_1.coreTokens.reporter, plugin_1.commonTokens.options, di_1.coreTokens.inputFiles, plugin_1.commonTokens.logger);
//# sourceMappingURL=MutationTestReportCalculator.js.map