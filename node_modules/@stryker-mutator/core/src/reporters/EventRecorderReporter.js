"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const plugin_1 = require("@stryker-mutator/api/plugin");
const util_1 = require("@stryker-mutator/util");
const fileUtils_1 = require("../utils/fileUtils");
const DEFAULT_BASE_FOLDER = 'reports/mutation/events';
class EventRecorderReporter {
    constructor(log, options) {
        this.log = log;
        this.options = options;
        this.allWork = [];
        this.index = 0;
        this.createBaseFolderTask = fileUtils_1.cleanFolder(this.baseFolder);
    }
    get baseFolder() {
        if (!this._baseFolder) {
            if (this.options.eventReporter && this.options.eventReporter.baseDir) {
                this._baseFolder = this.options.eventReporter.baseDir;
                this.log.debug(`Using configured output folder ${this._baseFolder}`);
            }
            else {
                this.log.debug(`No base folder configuration found (using configuration: eventReporter: { baseDir: 'output/folder' }), using default ${DEFAULT_BASE_FOLDER}`);
                this._baseFolder = DEFAULT_BASE_FOLDER;
            }
        }
        return this._baseFolder;
    }
    writeToFile(methodName, data) {
        const filename = path.join(this.baseFolder, `${this.format(this.index++)}-${methodName}.json`);
        this.log.debug(`Writing event ${methodName} to file ${filename}`);
        return util_1.fsAsPromised.writeFile(filename, JSON.stringify(data), { encoding: 'utf8' });
    }
    format(input) {
        let str = input.toString();
        for (let i = 10000; i > 1; i = i / 10) {
            if (i > input) {
                str = '0' + str;
            }
        }
        return str;
    }
    work(eventName, data) {
        this.allWork.push(this.createBaseFolderTask.then(() => this.writeToFile(eventName, data)));
    }
    onSourceFileRead(file) {
        this.work('onSourceFileRead', file);
    }
    onAllSourceFilesRead(files) {
        this.work('onAllSourceFilesRead', files);
    }
    onAllMutantsMatchedWithTests(results) {
        this.work('onAllMutantsMatchedWithTests', results);
    }
    onMutantTested(result) {
        this.work('onMutantTested', result);
    }
    onMutationTestReportReady(report) {
        this.work('onMutationTestReportReady', report);
    }
    onScoreCalculated(score) {
        this.work('onScoreCalculated', score);
    }
    onAllMutantsTested(results) {
        this.work('onAllMutantsTested', results);
    }
    async wrapUp() {
        await this.createBaseFolderTask;
        return Promise.all(this.allWork);
    }
}
exports.default = EventRecorderReporter;
EventRecorderReporter.inject = plugin_1.tokens(plugin_1.commonTokens.logger, plugin_1.commonTokens.options);
//# sourceMappingURL=EventRecorderReporter.js.map