"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const inquirer = require("inquirer");
const CommandTestRunner_1 = require("../test-runner/CommandTestRunner");
class StrykerInquirer {
    async promptPresets(options) {
        const choices = options.map(_ => _.name);
        choices.push(new inquirer.Separator());
        choices.push('None/other');
        const answers = await inquirer.prompt({
            choices,
            message: 'Are you using one of these frameworks? Then select a preset configuration.',
            name: 'preset',
            type: 'list'
        });
        return options.find(_ => _.name === answers.preset);
    }
    async promptTestRunners(options) {
        const choices = options.map(_ => _.name);
        choices.push(new inquirer.Separator());
        choices.push(CommandTestRunner_1.default.runnerName);
        const answers = await inquirer.prompt({
            choices,
            default: 'Mocha',
            message: 'Which test runner do you want to use? If your test runner isn\'t listed here, you can choose "command" (it uses your `npm test` command, but will come with a big performance penalty)',
            name: 'testRunner',
            type: 'list'
        });
        return options.filter(_ => _.name === answers.testRunner)[0] || { name: CommandTestRunner_1.default.runnerName, pkg: null };
    }
    async promptTestFrameworks(options) {
        const answers = await inquirer.prompt({
            choices: options.map(_ => _.name),
            message: 'Which test framework do you want to use?',
            name: 'testFramework',
            type: 'list'
        });
        return options.filter(_ => _.name === answers.testFramework)[0];
    }
    async promptMutator(options) {
        const answers = await inquirer.prompt({
            choices: options.map(_ => _.name),
            message: 'What kind of code do you want to mutate?',
            name: 'mutator',
            type: 'list'
        });
        return options.filter(_ => _.name === answers.mutator)[0];
    }
    async promptTranspilers(options) {
        const answers = await inquirer.prompt({
            choices: options.map(_ => _.name),
            message: '[optional] What kind transformations should be applied to your code?',
            name: 'transpilers',
            type: 'checkbox'
        });
        return options.filter(option => answers.transpilers.some(transpilerName => option.name === transpilerName));
    }
    async promptReporters(options) {
        const answers = await inquirer.prompt({
            choices: options.map(_ => _.name),
            default: ['clear-text', 'progress'],
            message: 'Which reporter(s) do you want to use?',
            name: 'reporters',
            type: 'checkbox'
        });
        return options.filter(option => answers.reporters.some(reporterName => option.name === reporterName));
    }
    async promptPackageManager(options) {
        const answers = await inquirer.prompt({
            choices: options.map(_ => _.name),
            default: ['npm'],
            message: 'Which package manager do you want to use?',
            name: 'packageManager',
            type: 'list'
        });
        return options.filter(_ => _.name === answers.packageManager)[0];
    }
}
exports.StrykerInquirer = StrykerInquirer;
//# sourceMappingURL=StrykerInquirer.js.map