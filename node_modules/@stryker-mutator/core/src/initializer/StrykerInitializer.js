"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const child = require("child_process");
const plugin_1 = require("@stryker-mutator/api/plugin");
const CommandTestRunner_1 = require("../test-runner/CommandTestRunner");
const objectUtils_1 = require("../utils/objectUtils");
const _1 = require(".");
class StrykerInitializer {
    constructor(log, out, client, strykerPresets, configWriter, gitignoreWriter, inquirer) {
        this.log = log;
        this.out = out;
        this.client = client;
        this.strykerPresets = strykerPresets;
        this.configWriter = configWriter;
        this.gitignoreWriter = gitignoreWriter;
        this.inquirer = inquirer;
    }
    /**
     * Runs the initializer will prompt the user for questions about his setup. After that, install plugins and configure Stryker.
     * @function
     */
    async initialize() {
        this.configWriter.guardForExistingConfig();
        this.patchProxies();
        const selectedPreset = await this.selectPreset();
        if (selectedPreset) {
            await this.initiatePreset(this.configWriter, selectedPreset);
        }
        else {
            await this.initiateCustom(this.configWriter);
        }
        await this.gitignoreWriter.addStrykerTempFolder();
        this.out('Done configuring stryker. Please review `stryker.conf.js`, you might need to configure transpilers or your test runner correctly.');
        this.out("Let's kill some mutants with this command: `stryker run`");
    }
    /**
     * The typed rest client works only with the specific HTTP_PROXY and HTTPS_PROXY env settings.
     * Let's make sure they are available.
     */
    patchProxies() {
        const copyEnvVariable = (from, to) => {
            if (process.env[from] && !process.env[to]) {
                process.env[to] = process.env[from];
            }
        };
        copyEnvVariable('http_proxy', 'HTTP_PROXY');
        copyEnvVariable('https_proxy', 'HTTPS_PROXY');
    }
    async selectPreset() {
        const presetOptions = this.strykerPresets;
        if (presetOptions.length) {
            this.log.debug(`Found presets: ${JSON.stringify(presetOptions)}`);
            return this.inquirer.promptPresets(presetOptions);
        }
        else {
            this.log.debug('No presets have been configured, reverting to custom configuration');
            return undefined;
        }
    }
    async initiatePreset(configWriter, selectedPreset) {
        const presetConfig = await selectedPreset.createConfig();
        await configWriter.writePreset(presetConfig);
        const selectedPackageManager = await this.selectPackageManager();
        this.installNpmDependencies(presetConfig.dependencies, selectedPackageManager);
    }
    async initiateCustom(configWriter) {
        const selectedTestRunner = await this.selectTestRunner();
        const selectedTestFramework = selectedTestRunner && !CommandTestRunner_1.default.is(selectedTestRunner.name) ? await this.selectTestFramework(selectedTestRunner) : null;
        const selectedMutator = await this.selectMutator();
        const selectedTranspilers = await this.selectTranspilers();
        const selectedReporters = await this.selectReporters();
        const selectedPackageManager = await this.selectPackageManager();
        const npmDependencies = this.getSelectedNpmDependencies([selectedTestRunner, selectedTestFramework, selectedMutator].concat(selectedTranspilers).concat(selectedReporters));
        await configWriter.write(selectedTestRunner, selectedTestFramework, selectedMutator, selectedTranspilers, selectedReporters, selectedPackageManager, await this.fetchAdditionalConfig(npmDependencies));
        this.installNpmDependencies(npmDependencies.map(pkg => pkg.name), selectedPackageManager);
    }
    async selectTestRunner() {
        const testRunnerOptions = await this.client.getTestRunnerOptions();
        if (testRunnerOptions.length) {
            this.log.debug(`Found test runners: ${JSON.stringify(testRunnerOptions)}`);
            return this.inquirer.promptTestRunners(testRunnerOptions);
        }
        else {
            this.out('Unable to select a test runner. You will need to configure it manually.');
            return null;
        }
    }
    async selectReporters() {
        let reporterOptions;
        reporterOptions = await this.client.getTestReporterOptions();
        reporterOptions.push({
            name: 'clear-text',
            pkg: null
        }, {
            name: 'progress',
            pkg: null
        }, {
            name: 'dashboard',
            pkg: null
        });
        return this.inquirer.promptReporters(reporterOptions);
    }
    async selectTestFramework(testRunnerOption) {
        let selectedTestFramework = null;
        const testFrameworkOptions = await this.client.getTestFrameworkOptions(testRunnerOption.pkg ? testRunnerOption.pkg.name : null);
        if (testFrameworkOptions.length) {
            this.log.debug(`Found test frameworks for ${testRunnerOption.name}: ${JSON.stringify(testFrameworkOptions)}`);
            const none = {
                name: 'None/other',
                pkg: null
            };
            testFrameworkOptions.push(none);
            selectedTestFramework = await this.inquirer.promptTestFrameworks(testFrameworkOptions);
            if (selectedTestFramework === none) {
                selectedTestFramework = null;
                this.out('OK, downgrading coverageAnalysis to "all"');
            }
        }
        else {
            this.out(`No stryker test framework plugin found that is compatible with ${testRunnerOption.name}, downgrading coverageAnalysis to "all"`);
        }
        return selectedTestFramework;
    }
    async selectMutator() {
        const mutatorOptions = await this.client.getMutatorOptions();
        if (mutatorOptions.length) {
            this.log.debug(`Found mutators: ${JSON.stringify(mutatorOptions)}`);
            return this.inquirer.promptMutator(mutatorOptions);
        }
        else {
            this.out('Unable to select a mutator. You will need to configure it manually.');
            return null;
        }
    }
    async selectTranspilers() {
        const options = await this.client.getTranspilerOptions();
        if (options.length) {
            this.log.debug(`Found transpilers: ${JSON.stringify(options)}`);
            return this.inquirer.promptTranspilers(options);
        }
        else {
            this.out('Unable to select transpilers. You will need to configure it manually, if you want to use any.');
            return null;
        }
    }
    async selectPackageManager() {
        return this.inquirer.promptPackageManager([
            {
                name: "npm" /* Npm */,
                pkg: null
            },
            {
                name: "yarn" /* Yarn */,
                pkg: null
            }
        ]);
    }
    getSelectedNpmDependencies(selectedOptions) {
        return objectUtils_1.filterEmpty(objectUtils_1.filterEmpty(selectedOptions).map(option => option.pkg));
    }
    /**
     * Install the npm packages
     * @function
     */
    installNpmDependencies(dependencies, selectedOption) {
        if (dependencies.length === 0) {
            return;
        }
        const dependencyArg = dependencies.join(' ');
        this.out('Installing NPM dependencies...');
        const cmd = selectedOption.name === "npm" /* Npm */ ? `npm i --save-dev ${dependencyArg}` : `yarn add ${dependencyArg} --dev`;
        this.out(cmd);
        try {
            child.execSync(cmd, { stdio: [0, 1, 2] });
        }
        catch (_) {
            this.out(`An error occurred during installation, please try it yourself: "${cmd}"`);
        }
    }
    async fetchAdditionalConfig(dependencies) {
        return objectUtils_1.filterEmpty(await Promise.all(dependencies.map(dep => this.client.getAdditionalConfig(dep))));
    }
}
exports.default = StrykerInitializer;
StrykerInitializer.inject = plugin_1.tokens(plugin_1.commonTokens.logger, _1.initializerTokens.out, _1.initializerTokens.npmClient, _1.initializerTokens.strykerPresets, _1.initializerTokens.configWriter, _1.initializerTokens.gitignoreWriter, _1.initializerTokens.inquirer);
//# sourceMappingURL=StrykerInitializer.js.map