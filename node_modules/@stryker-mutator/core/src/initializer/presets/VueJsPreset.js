"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const inquirer = require("inquirer");
const handbookUrl = 'https://github.com/stryker-mutator/stryker-handbook/blob/master/stryker/guides/vuejs.md#vuejs';
/**
 * More information can be found in the Stryker handbook:
 * https://github.com/stryker-mutator/stryker-handbook/blob/master/stryker/guides/vuejs.md#vuejs
 */
class VueJsPreset {
    constructor() {
        this.name = 'vueJs';
        this.generalDependencies = ['@stryker-mutator/core', '@stryker-mutator/vue-mutator', '@stryker-mutator/html-reporter'];
        this.jestDependency = '@stryker-mutator/jest-runner';
        this.jestConf = `{
      mutate: ['src/**/*.js', 'src/**/*.ts', 'src/**/*.vue'],
      mutator: 'vue',
      testRunner: 'jest',
      jest: {
        // config: require('path/to/your/custom/jestConfig.js')
      },
      reporters: ['progress', 'clear-text', 'html'],
      coverageAnalysis: 'off'
    }`;
        this.karmaDependency = '@stryker-mutator/karma-runner';
        this.karmaConf = `{
      mutate: ['src/**/*.js', 'src/**/*.ts', 'src/**/*.vue'],
      mutator: 'vue',
      testRunner: 'karma',
      karma: {
        configFile: 'test/unit/karma.conf.js',
        config: {
          browsers: ['ChromeHeadless']
        }
      },
      reporters: ['progress', 'clear-text', 'html'],
      coverageAnalysis: 'off'
    }`;
    }
    async createConfig() {
        const testRunnerChoices = ['karma', 'jest'];
        const testRunnerAnswers = await inquirer.prompt({
            choices: testRunnerChoices,
            message: 'Which test runner do you want to use?',
            name: 'testRunner',
            type: 'list'
        });
        const scriptChoices = ['typescript', 'javascript'];
        const scriptAnswers = await inquirer.prompt({
            choices: scriptChoices,
            message: 'Which language does your project use?',
            name: 'script',
            type: 'list'
        });
        const chosenTestRunner = testRunnerAnswers.testRunner;
        const chosenScript = scriptAnswers.script;
        return {
            config: this.getConfigString(chosenTestRunner),
            dependencies: this.createDependencies(chosenTestRunner, chosenScript),
            handbookUrl
        };
    }
    getConfigString(testRunner) {
        if (testRunner === 'karma') {
            return this.karmaConf;
        }
        else if (testRunner === 'jest') {
            return this.jestConf;
        }
        else {
            throw new Error(`Invalid test runner chosen: ${testRunner}`);
        }
    }
    createDependencies(testRunner, script) {
        const dependencies = this.generalDependencies;
        dependencies.push(this.getTestRunnerDependency(testRunner));
        dependencies.push(this.getScriptDependency(script));
        return dependencies;
    }
    getScriptDependency(script) {
        if (script === 'typescript') {
            return '@stryker-mutator/typescript';
        }
        else if (script === 'javascript') {
            return '@stryker-mutator/javascript-mutator';
        }
        else {
            throw new Error(`Invalid script chosen: ${script}`);
        }
    }
    getTestRunnerDependency(testRunner) {
        if (testRunner === 'karma') {
            return this.karmaDependency;
        }
        else if (testRunner === 'jest') {
            return this.jestDependency;
        }
        else {
            throw new Error(`Invalid test runner chosen: ${testRunner}`);
        }
    }
}
exports.VueJsPreset = VueJsPreset;
//# sourceMappingURL=VueJsPreset.js.map