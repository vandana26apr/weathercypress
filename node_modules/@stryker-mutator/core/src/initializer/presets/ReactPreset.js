"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const inquirer = require("inquirer");
const handbookUrl = 'https://github.com/stryker-mutator/stryker-handbook/blob/master/stryker/guides/react.md#react';
/**
 * More information can be found in the Stryker handbook:
 * https://github.com/stryker-mutator/stryker-handbook/blob/master/stryker/guides/react.md#react
 */
class ReactPreset {
    constructor() {
        this.name = 'react';
        this.generalDependencies = ['@stryker-mutator/core', '@stryker-mutator/jest-runner', '@stryker-mutator/html-reporter'];
        this.sharedConfig = `testRunner: 'jest',
    reporters: ['progress', 'clear-text', 'html'],
    coverageAnalysis: 'off',
    jest: {
      projectType: 'react'
    }
  `;
        this.tsxDependencies = ['@stryker-mutator/typescript', ...this.generalDependencies];
        this.tsxConf = `{
      mutate: ['src/**/*.ts?(x)', '!src/**/*@(.test|.spec|Spec).ts?(x)'],
      mutator: 'typescript',
      ${this.sharedConfig}
    }`;
        this.jsxDependencies = ['@stryker-mutator/javascript-mutator', ...this.generalDependencies];
        this.jsxConf = `{
      mutate: ['src/**/*.js?(x)', '!src/**/*@(.test|.spec|Spec).js?(x)'],
      mutator: 'javascript',
      ${this.sharedConfig}
    }`;
    }
    async createConfig() {
        const choices = ['JSX', 'TSX'];
        const answers = await inquirer.prompt({
            choices,
            message: 'Is your project a JSX project or a TSX project?',
            name: 'choice',
            type: 'list'
        });
        return this.load(answers.choice);
    }
    load(choice) {
        if (choice === 'JSX') {
            return { config: this.jsxConf, handbookUrl, dependencies: this.jsxDependencies };
        }
        else if (choice === 'TSX') {
            return { config: this.tsxConf, handbookUrl, dependencies: this.tsxDependencies };
        }
        else {
            throw new Error(`Invalid project type ${choice}`);
        }
    }
}
exports.ReactPreset = ReactPreset;
//# sourceMappingURL=ReactPreset.js.map