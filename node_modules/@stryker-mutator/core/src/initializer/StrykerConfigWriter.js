"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const plugin_1 = require("@stryker-mutator/api/plugin");
const util_1 = require("@stryker-mutator/util");
const _1 = require(".");
const STRYKER_CONFIG_FILE = 'stryker.conf.js';
class StrykerConfigWriter {
    constructor(log, out) {
        this.log = log;
        this.out = out;
    }
    guardForExistingConfig() {
        if (util_1.fsAsPromised.existsSync(STRYKER_CONFIG_FILE)) {
            const msg = 'Stryker config file "stryker.conf.js" already exists in the current directory. Please remove it and try again.';
            this.log.error(msg);
            throw new Error(msg);
        }
    }
    /**
     * Create stryker.conf.js based on the chosen framework and test runner
     * @function
     */
    write(selectedTestRunner, selectedTestFramework, selectedMutator, selectedTranspilers, selectedReporters, selectedPackageManager, additionalPiecesOfConfig) {
        const configObject = {
            mutator: selectedMutator ? selectedMutator.name : '',
            packageManager: selectedPackageManager.name,
            reporters: selectedReporters.map(rep => rep.name),
            testRunner: selectedTestRunner ? selectedTestRunner.name : '',
            transpilers: selectedTranspilers ? selectedTranspilers.map(t => t.name) : []
        };
        this.configureTestFramework(configObject, selectedTestFramework);
        Object.assign(configObject, ...additionalPiecesOfConfig);
        return this.writeStrykerConfig(configObject);
    }
    /**
     * Create stryker.conf.js based on the chosen preset
     * @function
     */
    async writePreset(presetConfig) {
        return this.writeStrykerConfigRaw(presetConfig.config, `// This config was generated using a preset.
    // Please see the handbook for more information: ${presetConfig.handbookUrl}`);
    }
    configureTestFramework(configObject, selectedTestFramework) {
        if (selectedTestFramework) {
            configObject.testFramework = selectedTestFramework.name;
            configObject.coverageAnalysis = 'perTest';
        }
        else {
            configObject.coverageAnalysis = 'all';
        }
    }
    async writeStrykerConfigRaw(rawConfig, rawHeader = '') {
        this.out('Writing & formatting stryker.conf.js...');
        const formattedConf = `${rawHeader}
      module.exports = function(config){
        config.set(
          ${rawConfig}
        );
      }`;
        await util_1.fsAsPromised.writeFile(STRYKER_CONFIG_FILE, formattedConf);
        try {
            await util_1.childProcessAsPromised.exec(`npx prettier --write ${STRYKER_CONFIG_FILE}`);
        }
        catch (error) {
            this.log.debug('Prettier exited with error', error);
            this.out('Unable to format stryker.conf.js file for you. This is not a big problem, but it might look a bit messy ðŸ™ˆ.');
        }
    }
    writeStrykerConfig(configObject) {
        return this.writeStrykerConfigRaw(this.wrapInModule(configObject));
    }
    wrapInModule(configObject) {
        return JSON.stringify(configObject, null, 2);
    }
}
exports.default = StrykerConfigWriter;
StrykerConfigWriter.inject = plugin_1.tokens(plugin_1.commonTokens.logger, _1.initializerTokens.out);
//# sourceMappingURL=StrykerConfigWriter.js.map