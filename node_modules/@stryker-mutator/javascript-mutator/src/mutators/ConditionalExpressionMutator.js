"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const types = require("@babel/types");
const NodeGenerator_1 = require("../helpers/NodeGenerator");
/**
 * Represents a mutator which can remove the conditional clause from statements.
 */
class ConditionalExpressionMutator {
    constructor() {
        this.validOperators = ['!=', '!==', '&&', '<', '<=', '==', '===', '>', '>=', '||'];
        this.name = 'ConditionalExpression';
    }
    hasValidParent(node) {
        return (!node.parent ||
            !(types.isForStatement(node.parent) ||
                types.isWhileStatement(node.parent) ||
                types.isIfStatement(node.parent) ||
                types.isDoWhileStatement(node.parent)));
    }
    isValidOperator(operator) {
        return this.validOperators.includes(operator);
    }
    mutate(node) {
        if ((types.isBinaryExpression(node) || types.isLogicalExpression(node)) && this.hasValidParent(node) && this.isValidOperator(node.operator)) {
            return [
                // raw string mutations
                [node, { raw: 'true' }],
                [node, { raw: 'false' }]
            ];
        }
        else if (types.isDoWhileStatement(node) || types.isWhileStatement(node)) {
            return [[node.test, { raw: 'false' }]];
        }
        else if (types.isForStatement(node)) {
            if (!node.test) {
                return [[node, NodeGenerator_1.NodeGenerator.createMutatedCloneWithProperties(node, { test: types.booleanLiteral(false) })]];
            }
            else {
                return [[node.test, { raw: 'false' }]];
            }
        }
        else if (types.isIfStatement(node)) {
            return [
                // raw string mutations in the `if` condition
                [node.test, { raw: 'true' }],
                [node.test, { raw: 'false' }]
            ];
        }
        else if (types.isSwitchCase(node) &&
            // if not a fallthrough case
            node.consequent.length > 0) {
            return [[node, NodeGenerator_1.NodeGenerator.createMutatedCloneWithProperties(node, { consequent: [] })]];
        }
        return [];
    }
}
exports.default = ConditionalExpressionMutator;
//# sourceMappingURL=ConditionalExpressionMutator.js.map